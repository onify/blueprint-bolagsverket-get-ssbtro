<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:modeler="http://camunda.org/schema/modeler/1.0" id="Definitions_1v535kq" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.14.0" modeler:executionPlatform="Camunda Platform" modeler:executionPlatformVersion="7.17.0">
  <bpmn:process id="bolagsverket-get-ssbtro" name="Onify Blueprint: Get SSBTRO data from Bolagsverket" isExecutable="true" camunda:historyTimeToLive="180">
    <bpmn:extensionElements />
    <bpmn:startEvent id="start" name="Start">
      <bpmn:outgoing>Flow_03z4mly</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="Flow_03z4mly" sourceRef="start" targetRef="getSettings" />
    <bpmn:endEvent id="success" name="Success">
      <bpmn:incoming>Flow_08c1hef</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="getSSBTROData" name="Get SSBTRO data from Bolagsverket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">${environment.output.settings._bolagsverket_ssbtro_url}</camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Content-Type">text/xml; charset=utf-8</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="body">
              <camunda:script scriptFormat="js">function generateGUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = (Math.random() * 16) | 0,
        v = c === 'x' ? r : (r &amp; 0x3 | 0x8);
    return v.toString(16);
  });
}

function getCurrentTimestamp() {
  return new Date().toISOString();
}

function isValidSwedishSSN(ssn) {
    ssn = ssn.replace(/\D/g, "").split("").reverse().slice(0, 10);
    if (ssn.length !== 10) {
        return false;
    }

    const sum = ssn.map(Number).reduce((previous, current, index) =&gt; {
        if (index % 2) current *= 2;
        if (current &gt; 9) current -= 9;
        return previous + current;
    });

    return sum % 10 === 0;
}

function getOrganizationTag(number) {
    const whitelist = [
        "198000000001",
        "198000000006",
        "198000000009",
        "198000000002",
        "198000000004",
		"198001011234"
    ];

    let mainNumber = number;
    let nameProtectionNumber = null;
    const dashIndex = number.indexOf('-');
    if (dashIndex !== -1) {
        mainNumber = number.substring(0, dashIndex);
        nameProtectionNumber = number.substring(dashIndex + 1);
    }

    if (whitelist.includes(mainNumber)) {
        return {
            orgTag: `&lt;for:Personnummer&gt;${mainNumber}&lt;/for:Personnummer&gt;`,
            nameProtectionNumberTag: nameProtectionNumber ? `&lt;for:Namnskyddslopnummer&gt;${nameProtectionNumber}&lt;/for:Namnskyddslopnummer&gt;` : ''
        };
    } else if (isValidSwedishSSN(number)) {
        return {
            orgTag: `&lt;for:Personnummer&gt;${number.replace('-', '')}&lt;/for:Personnummer&gt;`,
            nameProtectionNumberTag: ''
        };
    } else {
        return {
            orgTag: `&lt;for:Organisationsnummer&gt;${number.replace('-', '')}&lt;/for:Organisationsnummer&gt;`,
            nameProtectionNumberTag: ''
        };
    }
}

const tags = getOrganizationTag(content.input.TargetCompanyOrganizationNumber);
let companySegment = `
&lt;ForetagId&gt;
    &lt;for:PersonIdentitetsbeteckning&gt;
        ${tags.orgTag}
    &lt;/for:PersonIdentitetsbeteckning&gt;
`;
if (tags.nameProtectionNumberTag) {
    companySegment += `${tags.nameProtectionNumberTag}\n`;
}
companySegment += `&lt;/ForetagId&gt;`;

const soapEnvelope = `&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns="http://schema.bolagsverket.se/ssbtro/roll"
 xmlns:met="http://schema.bolagsverket.se/ssbt/metadata"
 xmlns:for="http://schema.bolagsverket.se/ssbt/foretag"&gt;
 &lt;soapenv:Header/&gt;
 &lt;soapenv:Body&gt;
 &lt;RollBegaran SchemaVersion="1.0.0"&gt;
 &lt;RollBegaranMetadata&gt;
 &lt;met:MeddelandeId&gt;${generateGUID()}&lt;/met:MeddelandeId&gt;
 &lt;met:TransaktionId&gt;${generateGUID()}&lt;/met:TransaktionId&gt;
 &lt;met:Tidstampel&gt;${getCurrentTimestamp()}&lt;/met:Tidstampel&gt;
 &lt;met:Datakonsument&gt;
 &lt;met:PartId&gt;
 &lt;met:Organisationsnummer&gt;${content.input.DataConsumerOrganizationNumber}&lt;/met:Organisationsnummer&gt;
 &lt;/met:PartId&gt;
 &lt;met:PartNamn&gt;${content.input.DataConsumerPartyName}&lt;/met:PartNamn&gt;
 &lt;met:Service&gt;
 &lt;met:ServiceNamn&gt;${content.input.DataConsumerServiceName}&lt;/met:ServiceNamn&gt;
 &lt;/met:Service&gt;
 &lt;/met:Datakonsument&gt;
 &lt;met:Anvandare&gt;
 &lt;met:PartId&gt;
 &lt;met:Personnummer&gt;${content.input.UserPersonalNumber}&lt;/met:Personnummer&gt;
 &lt;/met:PartId&gt;
 &lt;met:PartNamn&gt;${content.input.UserPartyName}&lt;/met:PartNamn&gt;
 &lt;/met:Anvandare&gt;
 &lt;/RollBegaranMetadata&gt;
 &lt;RollBegaranDetaljer&gt;
 &lt;PersonId&gt;
 &lt;for:PersonIdentitetsbeteckning&gt;
 &lt;for:Personnummer&gt;${content.input.UserPersonalNumber}&lt;/for:Personnummer&gt;
 &lt;/for:PersonIdentitetsbeteckning&gt;
 &lt;/PersonId&gt;
 ${companySegment}
 &lt;Foretagsform&gt;
 &lt;for:ForetagsformKod&gt;${content.input.TargetCompanyType}&lt;/for:ForetagsformKod&gt;
 &lt;/Foretagsform&gt;
 &lt;/RollBegaranDetaljer&gt;
 &lt;/RollBegaran&gt;
 &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;`;

next(null,soapEnvelope);</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="https">
              <camunda:map>
                <camunda:entry key="certificateAuthority">${environment.output.settings._bolagsverket_ssbt_certificate_authority.certificate}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>httpRequest</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {name: content.name, id: content.id});</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="DataConsumerOrganizationNumber">2021001234</camunda:inputParameter>
          <camunda:inputParameter name="DataConsumerPartyName">Onify</camunda:inputParameter>
          <camunda:inputParameter name="DataConsumerServiceName">Onify SSBTRO</camunda:inputParameter>
          <camunda:inputParameter name="UserPersonalNumber">198001011234</camunda:inputParameter>
          <camunda:inputParameter name="UserPartyName">Jon Doe</camunda:inputParameter>
          <camunda:inputParameter name="TargetCompanyOrganizationNumber">5560000002</camunda:inputParameter>
          <camunda:inputParameter name="TargetCompanyType">AB</camunda:inputParameter>
          <camunda:outputParameter name="organisationDataXML">${content.output.body}</camunda:outputParameter>
          <camunda:outputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: content.id, result: {done: true}});</camunda:script>
          </camunda:outputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_05996ba</bpmn:incoming>
      <bpmn:outgoing>Flow_01ilig8</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_05996ba" sourceRef="getSettings" targetRef="getSSBTROData" />
    <bpmn:sequenceFlow id="Flow_1srt2as" sourceRef="convertOrganisationDataXML" targetRef="debugLog" />
    <bpmn:boundaryEvent id="error_Persondata" attachedToRef="getSSBTROData">
      <bpmn:extensionElements>
        <camunda:executionListener event="end">
          <camunda:script scriptFormat="js">environment.variables.error = { 
  taskId: content.output.inner.data.id,
  payload: content.output.inner.output?.payload
}
next();</camunda:script>
        </camunda:executionListener>
      </bpmn:extensionElements>
      <bpmn:outgoing>Flow_1ssv6f3</bpmn:outgoing>
      <bpmn:errorEventDefinition id="ErrorEventDefinition_0pd3rin" />
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="Flow_1ssv6f3" sourceRef="error_Persondata" targetRef="error" />
    <bpmn:endEvent id="error" name="Error">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="status">
            <camunda:map>
              <camunda:entry key="statuskey">stop</camunda:entry>
              <camunda:entry key="statuscode">${environment.variables.error.payload.statusCode}</camunda:entry>
              <camunda:entry key="statusmessage">${environment.variables.error.payload.message}</camunda:entry>
              <camunda:entry key="error">${true}</camunda:entry>
            </camunda:map>
          </camunda:inputParameter>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: environment.variables.error.taskId, result: {error: true}});</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1ssv6f3</bpmn:incoming>
      <bpmn:errorEventDefinition id="ErrorEventDefinition_00elmhe" />
    </bpmn:endEvent>
    <bpmn:scriptTask id="debugLog" name="Debug log" scriptFormat="js">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {name: content.name, id: content.id});</camunda:script>
          </camunda:inputParameter>
          <camunda:outputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: content.id, result: {done: true}});</camunda:script>
          </camunda:outputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1srt2as</bpmn:incoming>
      <bpmn:outgoing>Flow_14w2ltd</bpmn:outgoing>
      <bpmn:script>console.log(JSON.stringify(environment.output.organisationData, null,2));
next();</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:serviceTask id="convertOrganisationDataXML" name="Convert organisationdata XML to JSON">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">http://oni-dev-functions:8282/convert/xml/json</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Content-Type">text/plain</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="responseType">json</camunda:inputParameter>
            <camunda:inputParameter name="body">${environment.output.organisationDataXML}</camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>httpRequest</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {name: content.name, id: content.id});</camunda:script>
          </camunda:inputParameter>
          <camunda:outputParameter name="organisationData">
            <camunda:script scriptFormat="js">next(null, content.output.body['soap:Envelope']['soap:Body']);</camunda:script>
          </camunda:outputParameter>
          <camunda:outputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: content.id, result: {done: true}});</camunda:script>
          </camunda:outputParameter>
          <camunda:outputParameter name="errorData">
            <camunda:script scriptFormat="js">function findAndExtractErrors(obj) {
    let errors = {};

    function recurse(currentObj) {
        if (Array.isArray(currentObj)) {
            currentObj.forEach(item =&gt; recurse(item));
        } else if (typeof currentObj === 'object' &amp;&amp; currentObj !== null) {
            Object.entries(currentObj).forEach(([key, value]) =&gt; {
                if (key.startsWith('ns5:Fel') || key.startsWith('ns6:Servicefel')) {
                    Object.entries(value).forEach(([errorKey, errorValue]) =&gt; {
                        let simplifiedKey = errorKey.replace(/^ns[56]:/, '');
                        if (!errors[simplifiedKey]) {
                            errors[simplifiedKey] = errorValue;
                        } else if (!errors[simplifiedKey].includes(errorValue)) {
                            errors[simplifiedKey] += ' / ' + errorValue;
                        }
                    });
                } else {
                    recurse(value);
                }
            });
        }
    }

    recurse(obj);

    if (Object.keys(errors).length &gt; 0 &amp;&amp; !errors['FelKod']) {
        errors['FelKod'] = 500;
    }

    return errors;
}

const errorData = findAndExtractErrors(content.output.body['soap:Envelope']['soap:Body']);
next(null, errorData);</camunda:script>
          </camunda:outputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_01ilig8</bpmn:incoming>
      <bpmn:outgoing>Flow_1srt2as</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="getSettings" name="Get settings">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {name: content.name, id: content.id});</camunda:script>
          </camunda:inputParameter>
          <camunda:outputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: content.id, result: {done: true}});</camunda:script>
          </camunda:outputParameter>
          <camunda:outputParameter name="settings">${content.output.body}</camunda:outputParameter>
        </camunda:inputOutput>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">/my/config/settings</camunda:inputParameter>
            <camunda:inputParameter name="query">
              <camunda:map>
                <camunda:entry key="tag">ssbt</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>onifyElevatedApiRequest</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_03z4mly</bpmn:incoming>
      <bpmn:outgoing>Flow_05996ba</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_01ilig8" sourceRef="getSSBTROData" targetRef="convertOrganisationDataXML" />
    <bpmn:exclusiveGateway id="Gateway_0hl3qw2" name="Error?">
      <bpmn:incoming>Flow_14w2ltd</bpmn:incoming>
      <bpmn:outgoing>Flow_0zpx522</bpmn:outgoing>
      <bpmn:outgoing>Flow_08c1hef</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="dataError" name="Error">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="status">
            <camunda:map>
              <camunda:entry key="statuskey">stop</camunda:entry>
              <camunda:entry key="statuscode">${environment.output.errorData.FelKod}</camunda:entry>
              <camunda:entry key="statusmessage">${environment.output.errorData.FelBeskrivning}</camunda:entry>
              <camunda:entry key="error">${true}</camunda:entry>
            </camunda:map>
          </camunda:inputParameter>
          <camunda:inputParameter name="state">
            <camunda:script scriptFormat="js">next(null, {id: content.id, result: {error: true}});</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0zpx522</bpmn:incoming>
      <bpmn:errorEventDefinition id="ErrorEventDefinition_0hs6jr8" />
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_14w2ltd" sourceRef="debugLog" targetRef="Gateway_0hl3qw2" />
    <bpmn:sequenceFlow id="Flow_0zpx522" name="Yes" sourceRef="Gateway_0hl3qw2" targetRef="dataError">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="js">next(null,(Object.keys(environment.output.errorData).length &gt; 0));</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_08c1hef" name="No" sourceRef="Gateway_0hl3qw2" targetRef="success" />
    <bpmn:textAnnotation id="TextAnnotation_0uhp9z9">
      <bpmn:text>Hub function</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0k14nb8" sourceRef="convertOrganisationDataXML" targetRef="TextAnnotation_0uhp9z9" />
    <bpmn:textAnnotation id="TextAnnotation_0nvzehb">
      <bpmn:text>Get settings for Bolagsverket SSBT</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0yerpy1" sourceRef="getSettings" targetRef="TextAnnotation_0nvzehb" />
    <bpmn:textAnnotation id="TextAnnotation_0b0nfhz">
      <bpmn:text>Please change inputs</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0ndnthx" sourceRef="getSSBTROData" targetRef="TextAnnotation_0b0nfhz" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="bolagsverket-get-ssbtro">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="start" bioc:stroke="#205022" bioc:fill="#c8e6c9" color:background-color="#c8e6c9" color:border-color="#205022">
        <dc:Bounds x="152" y="159" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="158" y="202" width="25" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1ggmcd4_di" bpmnElement="success" bioc:stroke="#43a047" bioc:fill="#c8e6c9" color:background-color="#c8e6c9" color:border-color="#43a047">
        <dc:Bounds x="1062" y="159" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1059" y="202" width="43" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1lobh6r_di" bpmnElement="getSSBTROData">
        <dc:Bounds x="430" y="137" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0h2l4jv_di" bpmnElement="error" bioc:stroke="#831311" bioc:fill="#ffcdd2" color:background-color="#ffcdd2" color:border-color="#831311">
        <dc:Bounds x="462" y="262" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="467" y="305" width="26" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0n6xkp3_di" bpmnElement="debugLog">
        <dc:Bounds x="770" y="137" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ti155t_di" bpmnElement="convertOrganisationDataXML">
        <dc:Bounds x="600" y="137" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0tdjxja_di" bpmnElement="getSettings">
        <dc:Bounds x="250" y="137" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0hl3qw2_di" bpmnElement="Gateway_0hl3qw2" isMarkerVisible="true">
        <dc:Bounds x="925" y="152" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="934" y="128" width="31" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_11ed1p6" bpmnElement="dataError" bioc:stroke="#831311" bioc:fill="#ffcdd2" color:background-color="#ffcdd2" color:border-color="#831311">
        <dc:Bounds x="1062" y="262" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1067" y="305" width="26" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0uhp9z9_di" bpmnElement="TextAnnotation_0uhp9z9">
        <dc:Bounds x="730" y="56" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0nvzehb_di" bpmnElement="TextAnnotation_0nvzehb">
        <dc:Bounds x="420" y="50" width="120" height="41" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0b0nfhz_di" bpmnElement="TextAnnotation_0b0nfhz">
        <dc:Bounds x="550" y="55" width="146" height="26" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0q8yp1s_di" bpmnElement="error_Persondata">
        <dc:Bounds x="462" y="199" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_03z4mly_di" bpmnElement="Flow_03z4mly">
        <di:waypoint x="188" y="177" />
        <di:waypoint x="250" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05996ba_di" bpmnElement="Flow_05996ba">
        <di:waypoint x="350" y="177" />
        <di:waypoint x="430" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1srt2as_di" bpmnElement="Flow_1srt2as">
        <di:waypoint x="700" y="177" />
        <di:waypoint x="770" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ssv6f3_di" bpmnElement="Flow_1ssv6f3">
        <di:waypoint x="480" y="235" />
        <di:waypoint x="480" y="262" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_01ilig8_di" bpmnElement="Flow_01ilig8">
        <di:waypoint x="530" y="177" />
        <di:waypoint x="600" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_14w2ltd_di" bpmnElement="Flow_14w2ltd">
        <di:waypoint x="870" y="177" />
        <di:waypoint x="925" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zpx522_di" bpmnElement="Flow_0zpx522">
        <di:waypoint x="950" y="202" />
        <di:waypoint x="950" y="280" />
        <di:waypoint x="1062" y="280" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="956" y="238" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08c1hef_di" bpmnElement="Flow_08c1hef">
        <di:waypoint x="975" y="177" />
        <di:waypoint x="1062" y="177" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1011" y="159" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0k14nb8_di" bpmnElement="Association_0k14nb8">
        <di:waypoint x="696" y="139" />
        <di:waypoint x="761" y="86" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0yerpy1_di" bpmnElement="Association_0yerpy1">
        <di:waypoint x="350" y="145" />
        <di:waypoint x="434" y="91" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0ndnthx_di" bpmnElement="Association_0ndnthx">
        <di:waypoint x="523" y="138" />
        <di:waypoint x="589" y="81" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
